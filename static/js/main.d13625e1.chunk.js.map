{"version":3,"sources":["config/config.ts","store/terminal/helpers.ts","store/terminal/HistoryEntry.ts","store/terminal/terminal.ts","components/Terminal/helpers.tsx","components/Terminal/Terminal.style.ts","components/Underscore/Underscore.style.ts","components/Underscore/Underscore.tsx","components/Terminal/Terminal.tsx","store/rootReducer.ts","store/index.ts","serviceWorker.ts","index.tsx"],"names":["config","host","process","github","buildPrompt","state","user","Config","replace","prelabel","postlabel","HistoryEntry","line","input","id","time","now","Date","getTime","this","toString","initialState","currentLine","history","isLoggedIn","undefined","terminalSlice","createSlice","name","reducers","digest","action","payload","output","window","open","buildNextLine","actions","formatLine","split","map","c","Wrapper","styled","div","Line","UnderscoreStyle","span","Underscore","Terminal","dispatch","useDispatch","useSelector","terminal","useState","setInput","ref","useRef","focus","current","useEffect","tabIndex","onBlur","onKeyDown","e","console","log","key","slice","RegExp","test","item","rootReducer","combineReducers","store","configureStore","reducer","Boolean","location","hostname","match","require","default","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d13625e1.chunk.js","sourcesContent":["import Config from './config.type'\n\nconst config: Config = {\n  host: process.env.REACT_APP_URL || '',\n  github: process.env.REACT_APP_GITHUB || '',\n}\n\nexport default config\n","import Config from '../../config'\nimport { TerminalState } from './terminal.types'\n\nfunction buildPrompt(state?: TerminalState): string {\n  const { user } = state || {}\n  const host: string = Config.host.replace(/^\\//, '')\n  const prelabel: string = user ? `${user}@` : ''\n  const postlabel: string = user ? '' : ' login'\n  const label = `${prelabel}${host}${postlabel}: `\n  return label\n}\n\nfunction buildNextLine(input: string, state: TerminalState): string {\n  const { isLoggedIn, user } = state\n\n  if (!isLoggedIn) {\n    return buildPrompt(state)\n  }\n\n  let output = ''\n\n  switch (input) {\n    case 'github':\n      output = Config.github\n      window.open(Config.github, '_blank')\n      break\n    case 'help':\n      output = 'Nobody will help you...'\n      break\n    case 'whoami':\n      output = `${user}`\n      break\n    default:\n  }\n\n  return `${output ? `${output}\\n` : ''}${buildPrompt(state)}`\n}\n\nexport { buildNextLine, buildPrompt }\n","export default class HistoryEntry {\n  id: string\n  line: string\n  time: number\n\n  constructor(line: string, input: string) {\n    const now: number = new Date().getTime()\n    this.id = now.toString()\n    this.line = `${line} ${input}`\n    this.time = now\n  }\n}\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit'\n\nimport { buildNextLine, buildPrompt } from './helpers'\nimport HistoryEntry from './HistoryEntry'\nimport { Digest, TerminalState } from './terminal.types'\n\nconst initialState: TerminalState = {\n  currentLine: buildPrompt(),\n  history: [],\n  isLoggedIn: false,\n  user: undefined,\n}\n\nconst terminalSlice = createSlice({\n  name: 'terminal',\n  initialState,\n  reducers: {\n    digest(state, action: PayloadAction<Digest>) {\n      const { input } = action.payload\n\n      state.history = [\n        ...state.history,\n        new HistoryEntry(state.currentLine, input),\n      ]\n\n      if (!state.isLoggedIn) {\n        state.isLoggedIn = true\n        state.user = input\n        state.currentLine = buildPrompt(state)\n      } else {\n        state.currentLine = buildNextLine(input, state)\n      }\n    },\n  },\n})\n\nexport const { digest } = terminalSlice.actions\n\nexport default terminalSlice.reducer\n","import React from 'react'\n\nfunction formatLine(line: string): Array<string | JSX.Element> {\n  return line.split('').map((c) => (c === '\\n' ? <br /> : c))\n}\n\nexport { formatLine }\n","import styled from 'styled-components'\n\nconst Wrapper = styled.div`\n  background: #292727;\n  color: white;\n  height: 100%;\n  padding: 10px 10px;\n  width: 100%;\n\n  &:focus {\n    outline: none;\n  }\n`\n\nconst Line = styled.div`\n  &:not(:last-child) {\n    margin-bottom: 2px;\n  }\n`\n\nexport { Line, Wrapper }\n","import styled from 'styled-components'\n\nconst UnderscoreStyle = styled.span`\n  animation: blinker 0.5s linear infinite;\n\n  @keyframes blinker {\n    50% {\n      opacity: 0;\n    }\n  }\n`\n\nexport default UnderscoreStyle\n","import React, { FunctionComponent } from 'react'\nimport UnderscoreStyle from './Underscore.style'\n\nconst Underscore: FunctionComponent = () => {\n  return <UnderscoreStyle>_</UnderscoreStyle>\n}\n\nexport default Underscore\n","import React, { KeyboardEvent, useEffect, useRef, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { RootState } from '../../store/rootReducer'\nimport { digest, HistoryEntry } from '../../store/terminal'\n\nimport { formatLine } from './helpers'\nimport { Line, Wrapper } from './Terminal.style'\nimport Underscore from '../Underscore'\n\nconst Terminal: React.FC = () => {\n  const dispatch = useDispatch()\n  const { currentLine, history } = useSelector(\n    (state: RootState) => state.terminal\n  )\n  const [input, setInput] = useState<string>('')\n  const ref = useRef<HTMLDivElement>(null)\n\n  const focus = () => {\n    if (ref.current) {\n      ref.current.focus()\n    }\n  }\n\n  useEffect(() => {\n    focus()\n  }, [])\n\n  const onKeyPress = (e: KeyboardEvent) => {\n    console.log(e.key, e)\n    switch (e.key) {\n      case 'Enter':\n        dispatch(digest({ input }))\n        setInput('')\n        break\n      case 'Backspace':\n        setInput(input.slice(0, -1))\n        break\n      default:\n        if (new RegExp(/^[a-z0-9]$/, 'i').test(e.key)) {\n          setInput(`${input}${e.key}`)\n        }\n    }\n  }\n\n  return (\n    <Wrapper tabIndex={0} onBlur={focus} onKeyDown={onKeyPress} ref={ref}>\n      {history.map((item: HistoryEntry) => (\n        <Line key={item.id as string}>{formatLine(item.line)}</Line>\n      ))}\n      <Line>\n        <span>{formatLine(currentLine)}</span>\n        <span>{input}</span>\n        <Underscore />\n      </Line>\n    </Wrapper>\n  )\n}\n\nexport default Terminal\n","import { combineReducers } from '@reduxjs/toolkit'\nimport terminal from './terminal'\n\nconst rootReducer = combineReducers({ terminal })\n\nexport type RootState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './rootReducer'\n\nconst store = configureStore({\n  reducer: rootReducer,\n})\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default\n    store.replaceReducer(newRootReducer)\n  })\n}\n\nexport type AppDispatch = typeof store.dispatch\n\nexport default store\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister(): void {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister()\n      })\n      .catch((error) => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport store from './store'\nimport * as serviceWorker from './serviceWorker'\n\nconst render = () => {\n  const Terminal = require('./components/Terminal').default\n\n  ReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <Terminal />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n  )\n}\n\nrender()\n\nif (process.env.NODE_ENV === 'development' && module.hot) {\n  module.hot.accept('./components/Terminal', render)\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}